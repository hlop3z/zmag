{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zmag","text":"<p>Zmag, is built with Pyzmq (ZeroMQ) and Strawberry this project is the sibling of Fastberry</p> <p>The <code>Command-Line-Interface</code> (CLI) is built with Click.</p>"},{"location":"#description","title":"Description","text":"<p>A tool for building <code>GraphQL \u2014 API(s)</code> with <code>Python</code>.</p> <p>You can create . . .</p> <ol> <li><code>GraphQL</code> \u2014 <code>Query</code>(s) and <code>Mutation</code>(s).</li> <li><code>Commands</code> \u2014 To create automated processes and more . . .</li> </ol>"},{"location":"#built-with","title":"Built With","text":"Module Is Used To... Pyzmq API's core Universal Messaging <code>Library</code>. Strawberry GraphQL <code>Library</code> Click Manage the server, development process and custom <code>Commands</code>. SPOC FrameWork tool for building this <code>Framework</code>. DBController Database Controller for <code>SQL</code> and <code>Mongo</code>. Starlette Run the server in <code>Debug</code> mode."},{"location":"#install-zmag-demo","title":"Install Zmag (Demo)","text":"<pre><code>python -m pip install \"zmag[testing]\"\n</code></pre>"},{"location":"#install-zmag-mongo","title":"Install Zmag Mongo","text":"<pre><code>python -m pip install \"zmag[mongo]\"\n</code></pre>"},{"location":"#install-zmag-sql","title":"Install Zmag SQL","text":"<pre><code>python -m pip install \"zmag[sql]\" \"databases[sqlite]\"\n</code></pre> <p>SQL Options</p> Database Extra Installation(s) PostgreSQL <code>\"databases[postgresql]\"</code> MySQL <code>\"databases[mysql]\"</code> Sqlite <code>\"databases[sqlite]\"</code>"},{"location":"#core-layout","title":"Core Layout","text":"<pre><code>root/                           --&gt; &lt;Directory&gt; - Project's Root.\n|\n|-- apps/                       --&gt; &lt;Directory&gt; - Project's Apps.\n|\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    |\n|    |-- .env/                  --&gt; &lt;Directory&gt; - Environments.\n|    |   |-- development.toml   --&gt; &lt;File&gt; - Development    | Settings.\n|    |   |-- production.toml    --&gt; &lt;File&gt; - Production     | Settings.\n|    |   `-- staging.toml       --&gt; &lt;File&gt; - Staging        | Settings.\n|    |\n|    |-- docs.md                --&gt; &lt;File&gt; - API's Documentation in HERE.\n|    |-- settings.py            --&gt; &lt;File&gt; - API (Pythonic) | Settings.\n|    `-- spoc.toml              --&gt; &lt;File&gt; - API (TOML)     | Settings.\n|\n|-- pyproject.toml              --&gt; &lt;File&gt; - Project (TOML) | Settings.\n|\n`-- etc...\n</code></pre>"},{"location":"#inspired-by-django","title":"Inspired By Django","text":"<p>There are several things from Django that inspire this tool.</p> <p>Some of the commands and the installation of modules (aka: INSTALLED_APPS) inside a Django project.</p>"},{"location":"#zmag-comes-with-a-few-key-commands","title":"Zmag comes with a few key commands:","text":"Command Is Used To... <code>startproject</code> Create a new Zmag project. <code>./manage.py run</code> Run FastApi Server. <code>./manage.py start-app</code> Create a Zmag App inside your \"<code>apps</code>\" directory. <code>./manage.py --help</code> For more information. <p>startproject</p> <p>Careful with the command <code>startproject</code>. Only use it once and make sure you are in a new folder. It will write files and folders.</p>"},{"location":"crud/","title":"GraphQL CRUD Operations for Models","text":"<p>This documentation offers a comprehensive guide to working with GraphQL operations in the context of models.</p> <p><code>Operations</code>: Discover a full suite of GraphQL operations encompassing Create, Read, Update, and Delete (CRUD) for models. Understand how to leverage GraphQL to efficiently handle model data, regardless of its complexity.</p> <p><code>Forms</code>: Learn how to define form classes tailored for GraphQL operations. You'll gain a solid understanding of creating and updating model instances using GraphQL and how to structure these forms effectively.</p> <p><code>Manager</code>: Explore the controller responsible for managing model-related database operations. This section delves into methods for searching, retrieving details, creating, updating, and deleting model records. It also addresses key considerations like permissions and query execution.</p> <p>By the end of this documentation, you'll be well-equipped to harness the power of GraphQL for your model-driven applications. Whether you're dealing with Books, Users, or any other data entities, the principles covered here will be applicable and adaptable to your specific needs.</p>"},{"location":"crud/#operations-crud","title":"Operations (CRUD)","text":"graphql.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { CRUD } GraphQL(s)\n\"\"\"\n\n# Zmag\nimport zmag\n\n# Type(s) Tools\nfrom . import forms, manager\n\nBooks = zmag.crud(\n    manager=manager.Book,\n    form=forms.Book,\n    clear_ignore=[\"author\"],\n    docs={},\n)\n</code></pre>"},{"location":"crud/#forms","title":"Forms","text":"forms.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Form } for the GraphQL's Operations\n\"\"\"\n\n# Zmag\nimport zmag\n\n# Create your &lt;forms&gt; here.\n@zmag.forms\nclass Book:\n    class Create:\n        \"\"\"(Form) Read The Docs\"\"\"\n\n        title = zmag.value(\n            str,\n            default=None,\n            required=True,\n        )\n\n        author = zmag.value(\n            str,\n            default=None,\n            required=True,\n            rules=[],\n        )\n\n    class Update:\n        \"\"\"(Form) Read The Docs\"\"\"\n\n        title = zmag.value(\n            str,\n            default=None,\n        )\n\n        author = zmag.value(\n            str,\n            default=None,\n        )\n</code></pre>"},{"location":"crud/#manager","title":"Manager","text":"manager.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\n\n# Zmag\nimport zmag\n\nfrom . import types\n\n# Create your &lt;managers&gt; here.\n@zmg.manager\nclass Book(zmg.BaseManager):\n    \"\"\"Book Manager\"\"\"\n\n    model = types.Book\n\n    @classmethod\n    async def search(\n        cls,\n        context,\n        pagination=None,\n        query=None,\n    ):\n        print(context)\n\n        # { PERMISSIONS }\n        user_id = 2\n        query = cls.filter_query_by_user_id(query, user_id)\n\n        # { QUERY } Finally Run\n        return await cls.objects.find(\n            query,\n            page=pagination.get(\"page\", 1),\n            limit=pagination.get(\"limit\", 10),\n            sort_by=pagination.get(\"sort_by\", \"-id\"),\n        )\n\n    @classmethod\n    async def detail(cls, context, id=None, query=None):\n        print(context)\n\n        # { PERMISSIONS }\n        user_id = 1\n        active_query = cls.filter_query_by_user_id(query, user_id)\n        print(active_query)\n\n        # { QUERY } Finally Run\n        return await cls.objects.find_one(active_query)\n\n    @classmethod\n    async def create(cls, context, form=None):\n        print(context)\n\n        # raise ValueError(\"author_name @ Author already registered\")\n        # raise PermissionError\n\n        # { QUERY } Finally Run\n        return await cls.objects.create(form)\n\n    @classmethod\n    async def update(cls, context, selected=None, form=None):\n        print(context)\n\n        # { PERMISSIONS }\n        user_id = 1\n        selected = await cls.get_ids_by_user_id(selected, user_id)\n\n        # { QUERY } Finally Run\n        print(selected, form)\n\n        return await cls.objects.update(selected, form)\n\n    @classmethod\n    async def delete(cls, context, selected=None):\n        print(context)\n\n        # { PERMISSIONS }\n        user_id = 1\n        selected = await cls.get_ids_by_user_id(selected, user_id)\n\n        # { QUERY } Finally Run\n        return await cls.objects.delete(selected)\n</code></pre>"},{"location":"crud/#error-handling-manager","title":"Error Handling (Manager)","text":""},{"location":"crud/#value","title":"Value","text":"<p>When raising an error, include a specific \"field/key\" and an associated \"error text\" as arguments to the error constructor.</p> <p>For example: <code>input_field @ My Error Message</code></p> manager.py<pre><code>raise ValueError(\"author_name @ Author already registered\")\n</code></pre>"},{"location":"crud/#permission","title":"Permission","text":"manager.py<pre><code>raise PermissionError\n</code></pre>"},{"location":"settings/","title":"Settings","text":"<p>Core Settings are in <code>TOML</code> format. Because TOML is easy to read for humans and computers.</p> <p>TOML</p> <p>Since <code>TOML</code>  is <code>Python</code>'s new best friend. Feels like a good fit for the core settings of the project.</p>"},{"location":"settings/#settings-workflow","title":"Settings Workflow","text":"<p>Settings</p> <ol> <li>Load <code>pyproject.toml</code></li> <li>Load <code>spoc.toml</code></li> <li>Load <code>settings.py</code></li> <li>Load <code>Environment Variables</code></li> </ol> <pre><code>flowchart TB;\n    A[pyproject.toml] --&gt; E{Project Settings};\n    B[spoc.toml] --&gt; E{Project Settings};\n    C[settings.py] --&gt; E;\n    D[environment.toml] --&gt; E;</code></pre>"},{"location":"settings/#settings-locations","title":"Settings Locations","text":"<pre><code>root/                           --&gt; &lt;Directory&gt; - Project's Root.\n|\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    |\n|    |-- .env/                  --&gt; &lt;Directory&gt; - Environments.\n|    |   |-- development.toml   --&gt; &lt;File&gt; - Development Settings.\n|    |   |-- production.toml    --&gt; &lt;File&gt; - Production Settings.\n|    |   `-- staging.toml       --&gt; &lt;File&gt; - Staging Settings.\n|    |\n|    |-- settings.py            --&gt; &lt;File&gt; - Pythonic Settings.\n|    `-- spoc.toml              --&gt; &lt;File&gt; - Spoc Settings.\n|\n|-- pyproject.toml              --&gt; &lt;File&gt; - PyProject Settings.\n`-- etc...\n</code></pre> PyProjectSpocEnvironment VariablesCustom (settings.py)"},{"location":"settings/#pyproject-toml","title":"pyproject (TOML)","text":"pyproject.toml<pre><code>[project]\nname = \"zmag\" # (1)\nversion = \"0.1.4\" # (2)\ndescription = \"GraphQL Made Easy.\" # (3)\n\n# etc ... (4)\n</code></pre> <ol> <li>Name \u2014 The name of the project.</li> <li>Version \u2014 The version of the project.</li> <li>Description \u2014 Short description of your project.</li> <li>Other \u2014 Extra configurations of your project.</li> </ol> <p>PyProject</p> <p><code>zmag.config[\"pyproject\"]</code> is where your PyProject Variables are loaded.</p> example.py<pre><code>import zmag\n\nprint(zmag.config[\"pyproject\"])\n</code></pre>"},{"location":"settings/#spoc-toml","title":"SPOC (TOML)","text":"config/spoc.toml<pre><code>[spoc] # (1)\nmode = \"custom\" # development, production, staging, custom\ncustom_mode = \"development\" # (2)\n\n[spoc.api] # (3)\nmax_depth = 4 # (4)\nitems_per_page = 50 # (5)\n\n[spoc.apps] # (6)\nproduction = [\"app_one\", \"app_two\"] # (7)\ndevelopment = [] # (8)\nstaging = [] # (9)\n\n[spoc.extras] # (10)\nextensions = [\"zmag.extras.extensions\"] # (11)\npermissions = [\"zmag.extras.permissions\"] # (12)\n</code></pre> <ol> <li>API \u2014 Core Settings.</li> <li>Custom \u2014 Custom mode will load <code>Apps</code> from the pythonic <code>settings.py</code> plus the current <code>mode</code>.</li> <li>API \u2014 Querying &amp; More Configs.</li> <li>Depth \u2014 Search depth in the GraphQL's tree.</li> <li>Pagination \u2014 Number of rows per page.</li> <li>Installed \u2014 Apps.</li> <li>Production \u2014 Production Ready Apps (<code>Production</code>).</li> <li>Development \u2014 Development Only Apps (<code>Production</code> + <code>Development</code>).</li> <li>Staging \u2014 Testing Only Apps (<code>Production</code> + <code>Staging</code>).</li> <li>Installed \u2014 Extension &amp; Permissions.</li> <li>Extensions \u2014 For adding behavior that is applied across your entire (GraphQL) application.</li> <li>Permissions \u2014 For adding Permissions to your (GraphQL) application.</li> </ol> <p>SPOC</p> <p><code>zmag.config[\"spoc\"]</code> is where your SPOC Variables are loaded.</p> example.py<pre><code>import zmag\n\nprint(zmag.config[\"spoc\"])\n</code></pre>"},{"location":"settings/#environment-variables-toml","title":"Environment Variables (TOML)","text":"config/.env/development.toml<pre><code>[env]\nDEBUG       = \"yes\"\nSECRET_KEY  = \"fastapi-insecure-09d25e094faa6ca2556c\"\n</code></pre> <p>Variables</p> <p><code>zmag.config[\"env\"]</code> is where your Environment Variables are loaded.</p> example.py<pre><code>import zmag\n\nprint(zmag.config[\"env\"])\n</code></pre>"},{"location":"settings/#custom-python","title":"Custom (Python)","text":"settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\nimport pathlib\n\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n\n# Installed Apps\nINSTALLED_APPS = [\"good_app\", \"app_two\"]\n\n# Database(s)\nDATABASES = {\n    \"sql\"  : {\"default\": \"sqlite:///example.db\"},\n    \"mongo\": {\"default\": \"mongodb://localhost:27017/example\"},\n}\n</code></pre> <p>PyProject</p> <p><code>zmag.config[\"pyproject\"]</code> is where your PyProject Variables are loaded.</p> example.py<pre><code>import zmag\n\nprint(zmag.config[\"pyproject\"])\n</code></pre>"},{"location":"settings/#breakdown-of-the-extensions-and-permissions","title":"Breakdown of the Extensions and Permissions","text":""},{"location":"settings/#extensions-strawberry","title":"EXTENSIONS (Strawberry)","text":"<p>List of active Extensions.</p> <p>You can create your own <code>extension</code> by using the base module.</p> <p>The <code>BaseExtension</code> included is just a wrapper/rename for Extension from Strawberry</p>"},{"location":"settings/#permissions-strawberry","title":"PERMISSIONS (Strawberry)","text":"<p>List of active Permissions.</p> <p>You can create your own <code>permissions</code> by using the base module.</p> <p>The <code>BasePermission</code> included is just a wrapper for BasePermission from Strawberry</p>"},{"location":"applications/","title":"Introduction","text":"<p>The definition for \"Application\" in <code>Zmag</code> is basically a python <code>module</code>.</p> <p>The idea is to have \"self-contained\" <code>blocks of code</code> that are reusable.</p> <p>Also, easy to share and use inside other <code>Zmag</code> projects.</p>"},{"location":"applications/#command","title":"Command","text":"<pre><code>./manage.py start-app my_awesome_app\n</code></pre>"},{"location":"applications/#files-layout-complex","title":"Files Layout (Complex)","text":"<p>Files (Complex)</p> <p>The example below represents a Complex Application that uses all of the internal tools</p> <ol> <li><code>commands</code> path to create Internal commands</li> <li><code>extension</code> path to create GraphQL's extensions</li> <li><code>permissions</code> path to create GraphQL's permissions Name &amp; Usage of <code>on_event</code> are optional. You can name the <code>file</code> anyway you want.</li> </ol> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APPLICATION/       --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |-- __init__.py\n|        |-- commands.py\n|        |-- extension.py\n|        |-- graphql.py\n|        |-- forms.py\n|        |-- permissions.py\n|        `-- types.py\n|\n`-- etc...\n</code></pre>"},{"location":"applications/#files-layout-simple","title":"Files Layout (Simple)","text":"<p>Files (Simple)</p> <p>The example below represents a Simple Application that uses only the necessary tools to build an API</p> <ol> <li><code>types</code> use to create the equivalent of a database Model</li> <li><code>forms</code> use to create complex input forms</li> <li><code>manager</code> use to create complex database Queries &amp; Mutations</li> <li><code>graphql</code> use to create operations of the GraphQL</li> </ol> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APPLICATION/       --&gt; &lt;Directory&gt; - Your App in HERE!\n|        |-- __init__.py\n|        |-- forms.py\n|        |-- graphql.py\n|        |-- manager.py\n|        `-- types.py\n|\n`-- etc...\n</code></pre>"},{"location":"applications/#application-diagram","title":"Application Diagram","text":"<pre><code>flowchart LR;\n    A[Types] --- D;\n    B[Forms] --- D;\n    C[Manager] --- D;\n    D[Operations] --- F;\n    F{API} --- H{Client};</code></pre> <p>Demo</p> <p>The example above shows the flow of the API but it also shows all the <code>tools</code> you can use to build your projects.</p>"},{"location":"applications/application/","title":"Application (C.R.U.D Default Setup)","text":"<p>Info</p> <p>The CRUD application is created when you run the <code>start-app</code> command.</p>"},{"location":"applications/application/#crud","title":"CRUD","text":"<p>In this setup, all methods inside the <code>Query</code> and <code>Mutation</code> classes are automatically marked as static methods using <code>@staticmethod</code>. This means that when these functions are loaded after the server starts running, you won't need to use self within your functions.</p>"},{"location":"applications/application/#command","title":"Command","text":"<pre><code>./manage.py start-app my_app\n</code></pre>"},{"location":"applications/application/#pylint-disable","title":"PyLint (disable)","text":"<p>Warning</p> <p>E0213: Method should have \"<code>self</code>\" as first argument (no-self-argument)</p> <p>Disable the no-self-argument.</p>"},{"location":"applications/application/#five-operations-to-get-you-started","title":"Five Operations to get you started.","text":"<p>The demo-app comes with <code>5</code> core <code>operations</code>. (Create, Update, Delete, Search &amp; Detail)</p> GraphQLCRUD  Mutation  Query <code>Create</code> <code>Search</code> <code>Update</code> <code>Detail</code> <code>Delete</code> Method CRUD GraphQL Description <code>Create</code> Create <code>Mutation</code>     Create resource <code>Update</code> Update <code>Mutation</code>     Update resource <code>Delete</code> Delete <code>Mutation</code>      Delete resource <code>Search</code> Read <code>Query</code>       Fetch Multiple resources <code>Detail</code> Read <code>Query</code>       Fetch Single resource"},{"location":"applications/application/#classes","title":"Classes","text":"<ul> <li><code>Query</code>: GraphQL \"Query\" functions.</li> <li><code>Mutation</code>: GraphQL \"Mutation\" functions.</li> <li><code>Meta</code>: Configurations for the current GraphQL functions.</li> </ul>"},{"location":"applications/application/#meta-variables-optional","title":"Meta Variables (optional)","text":"<ul> <li><code>app</code> (bool) : Prepend the application's name to the operation's name.</li> <li><code>model</code> (str): Prepend model's name to the operation's name.</li> </ul> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql/            --&gt; &lt;Directory&gt; - Your GraphQL in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             |-- demo.py         --&gt; &lt;File&gt; - Demo File.\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/application/#demo-files","title":"Demo Files","text":"demo.py__init__.py <pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n\n# Zmag\nimport zmag\n\n\n# Create your API (GraphQL) here.\n@zmag.gql\nclass Demo:\n    \"\"\"Demo Api\"\"\"\n\n    class Meta:\n        \"\"\"GQL-Class Metadata\"\"\"\n\n        app = False\n        model = None\n\n    class Query:\n        \"\"\"Query\"\"\"\n\n        async def search(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Search\"\n\n        async def detail(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Detail\"\n\n    class Mutation:\n        \"\"\"Mutation\"\"\"\n\n        async def create(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Create\"\n\n        async def update(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Update\"\n\n        async def delete(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Delete\"\n</code></pre> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    GraphQL Operations\n\"\"\"\n\nfrom .demo import Demo\n</code></pre>"},{"location":"applications/commands/","title":"Commands","text":"<p>Your code needs to be in a file named <code>commands.py</code> or folder named <code>commands</code> inside your Application.</p> <p>Your <code>click.group</code> needs to be named <code>cli</code>.</p>"},{"location":"applications/commands/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands.py          --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands/           --&gt; &lt;Directory&gt; - Your Commands in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/commands/#python-code","title":"Python Code","text":"File Folder commands.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\nimport zmag\nimport click\n\n\n# Init Group\n@zmag.cli\ndef cli():\n    \"\"\"Click (CLI) Group\"\"\"\n\n# Create &lt;Commands&gt; here.\n@cli.command()\ndef hello_world():\n    \"\"\"Demo CLI Function\"\"\"\n\n    click.echo(\"Hello World\")\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\n\nimport zmag\n\n# Import &lt;Commands&gt; Here\nfrom .hello_world import hello_world\n\n\n# Init Group\n@zmag.cli\ndef cli():\n    \"\"\"Click (CLI) Group\"\"\"\n\n# Register &lt;Commands&gt; Here\ncli.add_command(hello_world)\n</code></pre> hello_world.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Command - Hello World\n\"\"\"\n\nimport click\n\n\n# Create &lt;Commands&gt; here.\n@click.command()\ndef hello_world():\n    \"\"\"Demo CLI Function\"\"\"\n\n    print(\"Hello World\")\n</code></pre>"},{"location":"applications/forms/","title":"Forms","text":"<p>Your code needs to be in a file named <code>forms.py</code> or folder named <code>forms</code> inside your Application.</p>"},{"location":"applications/forms/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- forms.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- forms/              --&gt; &lt;Directory&gt; - Your Forms in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre> <p>Tools</p> <p>Zmag <code>input-values</code> can only have a Single Typing. You'll mainly use 3 tools to create the <code>forms</code>.</p> <ol> <li><code>zmag.input(str)</code></li> <li><code>zmag.value</code></li> <li><code>zmag.filters(regex = list(tuple), rules = list(function))</code></li> </ol>"},{"location":"applications/forms/#value-references","title":"Value References","text":"Name API Reference <code>default</code> The default value <code>required</code> Default: <code>False</code>. Does the field requires an input value? <code>regex</code> Regex (validators) <code>key</code> = <code>Regex-Pattern</code> and <code>value</code> = <code>Error-Message</code> <code>rules</code> Custom (validators) returns <code>None</code> or <code>Error-Message(s)</code> <code>filters</code> Transform-Data with <code>Regex</code> &amp; <code>Rules</code>"},{"location":"applications/forms/#python-code","title":"Python Code","text":"<p>Tip</p> <p>Values can only have a Single Type.</p> <p>However, you can wrap it around a <code>list</code> for example: <code>list[int]</code></p>  File Folder forms.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Forms - Complex Inputs\n\"\"\"\nimport zmag\n\n# Create Group \"Form\"\nform = zmag.input(\"form\")\n\n# Create your &lt;forms&gt; here.\n\n@form  # (name=\"CustonInputName\")\nclass Search:\n    \"\"\"(Form) Read The Docs\"\"\"\n\n    name = zmag.value(\n        # Single Typing\n        str,\n        default=None,\n        required=True,\n    )\n    count = zmag.value(\n        int,\n        default=999,\n    )\n    cash = zmag.value(\n        float,\n        default=44.4,\n    )\n    amount = zmag.value(\n        zmag.decimal,\n        default=\"55.5\",\n    )\n    start_date = zmag.value(\n        zmag.date,\n        default=\"2022-11-10\",\n    )\n    end_datetime = zmag.value(\n        zmag.datetime,\n        default=\"2022-11-10T16:35:56.216344\",\n    )\n    timestamp = zmag.value(\n        zmag.time,\n        default=\"16:35:04.872130\",\n    )\n\n\n@form\nclass User:\n    \"\"\"(Complex-Form) Read The Docs\"\"\"\n\n    email = zmag.value(\n        str,\n        default=\"demo@helloworld.com\",\n        regex={\n            r\"[\\w\\.-]+@[\\w\\.-]+\": \"invalid email address\"\n        },\n        rules=[\n            (lambda v: v.startswith(\"demo\") or \"invalid input\")\n        ],\n        filters=zmag.filters(\n            regex=[\n                (\"^hello\", \"hola\"),\n                (\"com\", \"api\"),\n            ],  # (\"^hello\"...) [Won't Work]: We used { regex } to check if it startswith \"hello\".\n            rules=[\n                (lambda v: v.upper())\n            ],\n        ),\n    )\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Forms - Init\n\"\"\"\n\n# Import your &lt;cruds&gt; here.\nfrom .demo import Search, User\n</code></pre> demo.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - Complex Inputs\n\"\"\"\n\n# Zmag\nimport zmag\n\n# Create Group \"Form\"\nform = zmag.input(\"form\")\n\n# Create your API (GraphQL) here.\n\n@form  # (name=\"CustonInputName\")\nclass Search:\n    \"\"\"(Form) Read The Docs\"\"\"\n\n    name = zmag.value(\n        str,  # Single Typing\n        default=None,\n    )\n    count = zmag.value(\n        int,\n        default=None,\n    )\n    cash = zmag.value(\n        float,\n        default=None,\n    )\n    amount = zmag.value(\n        zmag.decimal,\n        default=None,\n    )\n    start_date = zmag.value(\n        zmag.date,\n        default=None,\n    )\n    end_datetime = zmag.value(\n        zmag.datetime,\n        default=None,\n    )\n    timestamp = zmag.value(\n        zmag.time,\n        default=None,\n        required=True,\n    )\n\n@form\nclass User:\n    \"\"\"(Complex-Form) Read The Docs\"\"\"\n\n    email = zmag.value(\n        str,\n        default=\"demo@helloworld.com\",\n        regex={r\"[\\w\\.-]+@[\\w\\.-]+\": \"invalid email address\"},\n        rules=[(lambda v: v.startswith(\"demo\") or \"invalid input\")],\n        filters=zmag.filters(\n            regex=[\n                (\"^hello\", \"hola\"),\n                (\"com\", \"api\"),\n            ],  # (\"^hello\"...) [Doesn't Work]: We used { regex } to check if it startswith \"hello\".\n            rules=[(lambda v: v.upper())],\n        ),\n    )\n</code></pre>"},{"location":"applications/graphql/","title":"GraphQL","text":"<p>Your code needs to be in a file named <code>graphql.py</code> or folder named <code>graphql</code> inside your Application.</p>"},{"location":"applications/graphql/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- graphql/            --&gt; &lt;Directory&gt; - Your GraphQL in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"applications/graphql/#python-code","title":"Python Code","text":"File Folder graphql.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n\n# Zmag\nimport zmag\n\n\n# Create your API (GraphQL) here.\n@zmag.gql\nclass Demo:\n    \"\"\"Demo Api\"\"\"\n\n    class Meta:\n        \"\"\"GQL-Class Metadata\"\"\"\n        app = False\n        model = None\n\n    class Query:\n        \"\"\"Query\"\"\"\n\n        async def detail(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Detail\"\n\n    class Mutation:\n        \"\"\"Mutation\"\"\"\n\n        async def create(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Create\"\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    GraphQL - Init\n\"\"\"\n\n# Import your &lt;cruds&gt; here.\nfrom .demo import Demo\n</code></pre> demo.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    API - GraphQL\n\"\"\"\n\n# Zmag\nimport zmag\n\n\n# Create your API (GraphQL) here.\n@zmag.gql\nclass Demo:\n    \"\"\"Demo Api\"\"\"\n\n    class Meta:\n        \"\"\"GQL-Class Metadata\"\"\"\n        app = False\n        model = None\n\n    class Query:\n        \"\"\"Query\"\"\"\n\n        async def detail(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Detail\"\n\n    class Mutation:\n        \"\"\"Mutation\"\"\"\n\n        async def create(info) -&gt; str:\n            \"\"\"Read the Docs\"\"\"\n            print(info)\n            return \"Create\"\n</code></pre>"},{"location":"applications/manager/","title":"Manager","text":"<p>Your code needs to be in a file named <code>manager.py</code> or folder named <code>manager</code> inside your Application.</p> <p>Info</p> <p>The purpose of the manager is to handle updates to the database</p>"},{"location":"applications/manager/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- manager.py            --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- manager/            --&gt; &lt;Directory&gt; - Your Manager(s) in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre> <p>Tool</p> <ul> <li><code>zmag.manager</code></li> </ul>"},{"location":"applications/manager/#python-code","title":"Python Code","text":"File Folder manager.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\nimport zmag\n\nfrom . import types\n\n\nclass Base:\n    \"\"\"Reusable Manager\"\"\"\n\n    @classmethod\n    async def all(cls):\n        return await cls.objects.all()\n\n    @classmethod\n    async def reset_table(cls):\n        return await cls.objects.delete(None, all=True)\n\n\n@zmag.manager\nclass Product(Base):\n    \"\"\"Product Manager\"\"\"\n\n    model = types.Product\n\n    @classmethod\n    async def create(cls, form):\n        results = None\n        if form.is_valid:\n            results = await cls.objects.create(form.data.__dict__)\n        return results\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Manager - Init\n\"\"\"\n\n# Import your &lt;managers&gt; here.\nfrom .product import Product\n</code></pre> product.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Controller } for the Database(s)\n\"\"\"\n\nimport zmag\n\nfrom . import types\n\n\nclass Base:\n    \"\"\"Reusable Manager\"\"\"\n\n    @classmethod\n    async def all(cls):\n        return await cls.objects.all()\n\n    @classmethod\n    async def reset_table(cls):\n        return await cls.objects.delete(None, all=True)\n\n\n@zmag.manager\nclass Product(Base):\n    \"\"\"Product Manager\"\"\"\n\n    model = types.Product\n\n    @classmethod\n    async def create(cls, form):\n        results = None\n        if form.is_valid:\n            results = await cls.objects.create(form.data.__dict__)\n        return results\n</code></pre>"},{"location":"applications/types/","title":"Types","text":"<p>Your <code>GraphQL-Types</code> need to be in a file named <code>types.py</code> inside your Application.</p> <pre><code>graph LR;\n    A{DataBase} --&gt; B;\n    A --&gt; C;\n    B[SQL] --&gt; D;\n    C[Mongo] --&gt; D{GraphQL Type};</code></pre> <p>Tip</p> <p>Go to DBController and learn more how to create and use the <code>Models</code> and <code>Fields</code>.</p>"},{"location":"applications/types/#file-layout","title":"File Layout","text":"Types (Models) Settings <pre><code>root/\n|--  apps/\n|    `--  MY_APP/\n|         `-- types.py          --&gt; &lt;File&gt; - Your code in HERE!\n`-- etc...\n</code></pre> <pre><code>root/\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    `-- settings.py            --&gt; &lt;File&gt; - API (Pythonic) | Settings.\n`-- etc...\n</code></pre> <p>Both <code>Mongo</code> and <code>SQLAlchemy</code> are optional. But I do recommend using at least one. Otherwise, there is no point in using this section and instead you should just declare your <code>Types</code> by using Strawberry</p> <p>Tools</p> <p>You'll mainly use 3 tools to create the <code>types</code>.</p> <ol> <li><code>zmag.sql.model</code></li> <li><code>zmag.mongo.model</code></li> <li><code>zmag.field</code></li> </ol>"},{"location":"applications/types/#python-code","title":"Python Code","text":"<pre><code>graph LR;\n    A{SQL} --&gt; C;\n    B{Mongo} --&gt; C[Databases Controller];\n    C --&gt; D{Types};</code></pre> TypesDatabases (settings.py) types.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Types } for GraphQL\n\"\"\"\n\nfrom typing import Optional\nimport zmag\n\nimport datetime\n\n# DateTime Functions\nclass Date:\n    datetime = lambda: datetime.datetime.now()\n    date = lambda: datetime.date.today()\n    time = lambda: datetime.datetime.now().time()\n\n\n# Create your &lt;types&gt; here.\n@zmag.sql.model(description=\"(Type) Read The Docs\")\nclass Product:\n    # Other { Type | Model }\n    category: Optional[\"Category\"] = None\n\n    # Core { Python }\n    name: str | None = None\n    aliases: list[str] | None = None\n    stock: int | None = None\n    is_available: bool | None = None\n\n    # Custom Scalars { GraphQL }\n    created_on: zmag.datetime = zmag.field(Date.datetime)\n    available_from: zmag.date = zmag.field(Date.date)\n    same_day_shipping_before: zmag.time = zmag.field(Date.time)\n    price: zmag.decimal | None = None\n    notes: list[zmag.text] = zmag.field(list)\n    is_object: zmag.json = zmag.field(dict)\n\n    # Other { Type | Model }\n    async def group(self) -&gt; Optional[\"Group\"]:\n        \"\"\"Group Type\"\"\"\n        return Group(name=\"awesome\")\n\n\n@zmag.sql.model\nclass Category:\n    \"\"\"(Type) Read The Docs\"\"\"\n\n    name: str\n\n\n@zmag.mongo.model\nclass Group:\n    \"\"\"(Type) Read The Docs\"\"\"\n\n    name: str\n</code></pre> config/settings.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\nimport pathlib\n\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1]\n\n# Installed Apps\nINSTALLED_APPS = []\n\n# Database(s)\nDATABASES = {\n    \"sql\"  : {\"default\": \"sqlite:///example.db\"},\n    \"mongo\": {\"default\": \"mongodb://localhost:27017/example\"},\n}\n</code></pre>"},{"location":"applications/types/#model-fields","title":"Model Fields","text":"<p>Fields translate from a particular type between <code>Python</code> , <code>SQL</code> and <code>GraphQL</code> data.</p> GraphQL Zmag(Python) SQLAlchemy JavaScript <code>ID</code> <code>zmag.ID</code> Integer String <code>String</code> <code>str</code> String(length=255) String <code>String</code> <code>zmag.text</code> Text String <code>Datetime</code> <code>datetime.datetime</code> DateTime String <code>Date</code> <code>datetime.date</code> Date String <code>Time</code> <code>datetime.time</code> Time String <code>Decimal</code> <code>decimal.decimal</code> String(length=255) String <code>Integer</code> <code>int</code> Integer Number <code>Float</code> <code>float</code> Float Number <code>Boolean</code> <code>bool</code> Boolean Boolean <code>JSON</code> <code>zmag.json</code> JSON Object"},{"location":"applications/types/#your-instance-includes-two-fields","title":"Your instance includes two fields","text":"<ol> <li><code>_id</code> : (str) Meant to be the original <code>Database</code> unique identifier.</li> <li><code>id</code> : (str) Meant to be the client's <code>GraphQL</code> unique identifier.</li> </ol>"},{"location":"databases/","title":"Migrations","text":"<p>Alembic</p> <p>The tool used to create migrations for SQL is Alembic for <code>SQLAlchemy</code>.</p> <pre><code>python ./manage.py db {My-Command}\n</code></pre>"},{"location":"databases/#available-commands","title":"Available Commands","text":"Command Description <code>auto-migrate</code> Database Make-Migrations &amp; Migrate in a single step. <code>make-migrations</code> Database Make-Migrations. <code>migrate</code> Database Migrate. <code>upgrade</code> Database Migrate (Upgrade). <code>downgrade</code> Database Migrate (Downgrade). <code>history</code> Database Migrations History. <code>reset</code> Database Delete Migrations (All-Versions)."}]}