{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zmag","text":"<p>Zmag, is built with Pyzmq (ZeroMQ) and Ariadne (GraphQL) this project is the sibling of Fastberry</p> <p>The <code>Command-Line-Interface</code> (CLI) is built with Click.</p>"},{"location":"#description","title":"Description","text":"<p>A tool for building <code>GraphQL \u2014 API(s)</code> with <code>Python</code>.</p> <p>You can create . . .</p> <ol> <li><code>GraphQL</code> \u2014 <code>Query</code>(s) and <code>Mutation</code>(s).</li> <li><code>Commands</code> \u2014 To create automated processes and more . . .</li> </ol>"},{"location":"#built-with","title":"Built With","text":"Module Is Used To... Pyzmq API's core Universal Messaging <code>Library</code>. Ariadne GraphQL <code>Library</code> Click Manage the server, development process and custom <code>Commands</code>. SPOC FrameWork tool for building this <code>Framework</code>. DBController Database Controller for <code>SQL</code> and <code>Mongo</code>. Starlette Run the server in <code>Debug</code> mode."},{"location":"#install-zmag-development","title":"Install Zmag (Development)","text":"<pre><code>python -m pip install \"zmag[debug]\"\n</code></pre>"},{"location":"#install-zmag-client","title":"Install Zmag (Client)","text":"<pre><code>python -m pip install \"zmag\"\n</code></pre>"},{"location":"#install-zmag-mongo","title":"Install Zmag Mongo","text":"<pre><code>python -m pip install \"zmag[mongo]\"\n</code></pre>"},{"location":"#install-zmag-sqlite","title":"Install Zmag SQLite","text":"<pre><code>python -m pip install \"zmag[sqlite]\"\n</code></pre>"},{"location":"#install-zmag-postgresql","title":"Install Zmag PostgreSQL","text":"<pre><code>python -m pip install \"zmag[sqlite]\"\n</code></pre>"},{"location":"#install-zmag-mysql","title":"Install Zmag MySQL","text":"<pre><code>python -m pip install \"zmag[mysql]\"\n</code></pre>"},{"location":"#core-layout","title":"Core Layout","text":"<pre><code>root/                           --&gt; &lt;Directory&gt; - Project's Root.\n|\n|-- apps/                       --&gt; &lt;Directory&gt; - Project's Apps.\n|\n|--  config/                    --&gt; &lt;Directory&gt; - Configurations.\n|    |-- settings.py            --&gt; &lt;File&gt; - API (Pythonic) | Settings.\n|    `-- spoc.toml              --&gt; &lt;File&gt; - API (TOML)     | Settings.\n|\n`-- etc...\n</code></pre>"},{"location":"#zmag-comes-with-a-few-key-commands","title":"Zmag comes with a few key commands:","text":"Command Is Used To... <code>startproject</code> Create a new Zmag project. <code>./main.py run</code> Run Server. <code>./main.py start-app</code> Create a Zmag App inside your \"<code>apps</code>\" directory. <code>./main.py db</code> SQL (only) Alembic Migrations. <code>./main.py --help</code> For more information. <p>startproject</p> <p>Careful with the command <code>startproject</code>. Only use it once and make sure you are in a new folder. It will write files and folders.</p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#core-layout","title":"Core Layout","text":"<pre><code>folder/\n|\n|-- client.py                   --&gt; &lt;File&gt; - Client Demo\n|\n|--  fragments/                 --&gt; &lt;Directory&gt; - Fragments.\n|    |-- author.graphql         --&gt; &lt;File&gt; - GraphQL Fragment.\n|    `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"client/#declaring-fragments","title":"Declaring Fragments","text":"author.graphql<pre><code># Used in: (filter, create_many, update_many)\nfragment List on Author {\n  id\n  fullName\n}\n\n# Used in: (create, update, detail)\nfragment Item on Author {\n  id\n  firstName\n  lastName\n  fullName\n}\n</code></pre>"},{"location":"client/#methods","title":"Methods","text":"Name Fragment Description <code>create</code> <code>Item</code> Create a single row <code>update</code> <code>Item</code> Update a single row <code>detail</code> <code>Item</code> Read a single row <code>filter</code> <code>List</code> Read multiple row <code>create_many</code> <code>List</code> Create multiple rows <code>update_many</code> <code>List</code> Update multiple rows <code>delete</code> None Delete multiple/single row(s) <code>info</code> None API's INFO"},{"location":"client/#starting-a-client","title":"Starting a Client","text":"client.py<pre><code>from pathlib import Path\nfrom zmag import Client\n\nCURRENT_PATH = Path(__file__).parent\nFRAGMENTS_PATH = CURRENT_PATH / \"fragments\"\n\nclient = Client(\n    host=\"tcp://127.0.0.1:5555\",\n    base_dir=FRAGMENTS_PATH,\n    fragments={\"Author\": \"author.graphql\"},\n)\n</code></pre>"},{"location":"client/#demo-setup","title":"Demo Setup","text":"<pre><code>MODEL_NAME = \"Author\"\nCONTEXT = {\n    \"user_id\": 123,\n}\n</code></pre>"},{"location":"client/#create","title":"Create","text":"<pre><code>form_create = {\n    \"firstName\": \"John\",  # John Michael Jane\n    \"lastName\": \"Doe\",  # Doe Crichton Smith\n}\nresponse = client.create(MODEL_NAME, form=form_create, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#update","title":"Update","text":"<pre><code>form_update = {\n    \"id\": \"Mjo6M2VmOWFiYmI1ZGY1YjY0MQ==\",\n    # \"firstName\": \"Jane\",\n    \"lastName\": \"Crichton\",\n}\nresponse = client.update(MODEL_NAME, form=form_update, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#detail","title":"Detail","text":"<pre><code>item_id = \"Mjo6M2VmOWFiYmI1ZGY1YjY0MQ==\"\nresponse = client.detail(MODEL_NAME, id=item_id, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#filter","title":"Filter","text":"<pre><code>response = client.filter(MODEL_NAME, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#create-many","title":"Create Many","text":"<pre><code>form_create_many = [\n    {\n        \"firstName\": \"Michael\",\n        \"lastName\": \"Crichton\",\n    },\n    {\n        \"firstName\": \"Jane\",  # Michael Jane\n        \"lastName\": \"Smith\",  # Crichton Smith\n    },\n]\nresponse = client.create_many(MODEL_NAME, forms=form_create_many, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#update-many","title":"Update Many","text":"<pre><code>item_ids = [\n    \"Mjo6M2VmOWFiYmI1ZGY1YjY0MQ==\",\n    \"MTo6YTU1ZTUzMmVhYjAyOGI0Mg==\",\n]\nform_update_many = {\n    # \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\",\n}\nresponse = client.update_many(\n    MODEL_NAME, ids=item_ids, form=form_update_many, context=CONTEXT\n)\nprint(response)\n</code></pre>"},{"location":"client/#delete","title":"Delete","text":"<pre><code>item_ids = [\n    \"Mjo6M2VmOWFiYmI1ZGY1YjY0MQ==\",\n    \"MTo6YTU1ZTUzMmVhYjAyOGI0Mg==\",\n    \"Mzo6NGQ0MDk4MzIxNjU0YTQ1Nw==\",\n]\nresponse = client.delete(MODEL_NAME, ids=item_ids, context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"client/#info","title":"Info","text":"<pre><code>response = client.info(context=CONTEXT)\nprint(response)\n</code></pre>"},{"location":"commands/","title":"Commands","text":"<p>Your code needs to be in a file named <code>commands.py</code> or folder named <code>commands</code> inside your Application.</p> <p>Your <code>click.group</code> needs to be named <code>cli</code>.</p>"},{"location":"commands/#file-or-folder-layout","title":"File or Folder Layout","text":"File Folder <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands.py          --&gt; &lt;File&gt; - Your code in HERE!\n|\n`-- etc...\n</code></pre> <pre><code>root/\n|\n|--  apps/\n|    `--  MY_APP/\n|         `-- commands/           --&gt; &lt;Directory&gt; - Your Commands in HERE!\n|             |-- __init__.py     --&gt; &lt;File&gt; - Your IMPORTS in HERE!\n|             `-- etc...\n|\n`-- etc...\n</code></pre>"},{"location":"commands/#python-code","title":"Python Code","text":"File Folder commands.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\nimport zmag\nimport click\n\n\n# Init Group\n@zmag.cli\ndef cli():\n    \"\"\"Click (CLI) Group\"\"\"\n\n# Create &lt;Commands&gt; here.\n@cli.command()\ndef hello_world():\n    \"\"\"Demo CLI Function\"\"\"\n\n    click.echo(\"Hello World\")\n</code></pre> __init__.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Custom - Command-Line-Group\n\"\"\"\n\nimport zmag\n\n# Import &lt;Commands&gt; Here\nfrom .hello_world import hello_world\n\n\n# Init Group\n@zmag.cli\ndef cli():\n    \"\"\"Click (CLI) Group\"\"\"\n\n# Register &lt;Commands&gt; Here\ncli.add_command(hello_world)\n</code></pre> hello_world.py<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    Command - Hello World\n\"\"\"\n\nimport click\n\n\n# Create &lt;Commands&gt; here.\n@click.command()\ndef hello_world():\n    \"\"\"Demo CLI Function\"\"\"\n\n    print(\"Hello World\")\n</code></pre>"},{"location":"manager/","title":"Type Manager","text":"<p>This tool is designed for GraphQL Type(s) management and resolving. Type management encompasses structuring and managing relationships among GraphQL types, enabling the modeling of data hierarchies and connections with other types.</p>"},{"location":"manager/#modeltype-definition","title":"Model/Type Definition","text":"<p>This function defines a model with a specified <code>kebab-case-name</code>.</p>"},{"location":"manager/#arguments","title":"Arguments","text":"<ul> <li><code>name</code> (str): The name of the model.</li> </ul> <p>Model Example:</p> <pre><code>import zmag\n\nAuthor = zmag.type(\"book-author\")\n</code></pre>"},{"location":"manager/#field-decorator","title":"<code>field</code> decorator","text":"<p>You can resolve a field for the model using the <code>@&lt;model_name&gt;.field</code> decorator.</p> <p>Example:</p> <pre><code>@Author.field(\"full_name\")\nasync def resolve_full_name(obj, info):\n    return obj.get(\"first_name\", \"\") + \" \" + obj.get(\"last_name\", \"\")\n</code></pre>"},{"location":"manager/#perms-decorator","title":"<code>perms</code> decorator","text":"<p>Options: <code>('update', 'delete', 'detail', 'filter')</code></p> <p>Specify permissions for the model using the <code>@&lt;model_name&gt;.perms</code> decorator.</p> <p>Example:</p> <pre><code>@Author.perms(\"update\")\nasync def check_object_perms(obj, info):\n    user_id = info.context.get(\"user_id\")\n    if obj.user_id != user_id:\n        return None\n    return obj\n</code></pre>"},{"location":"manager/#form-decorator","title":"<code>form</code> decorator","text":"<p>You can define forms for 'create' and 'update' operations using the <code>@&lt;model_name&gt;.form</code> decorator.</p> <p>Example:</p> <pre><code>@Author.form(\"update\")\nclass Update:\n    first_name = zmag.value(\n        str,\n        default=None,\n        required=False,\n        filters=zmag.filters(\n            rules=[(lambda v: v.lower())],\n        ),\n    )\n    last_name = zmag.value(\n        str,\n        required=True,\n        filters=zmag.filters(\n            rules=[(lambda v: v.lower())],\n        ),\n    )\n</code></pre>"},{"location":"manager/#after-decorator","title":"<code>after</code> decorator","text":"<p>Options: <code>('create', 'update', 'delete', 'detail', 'filter')</code></p> <p>Define actions to be performed after operations using the <code>@&lt;model_name&gt;.after</code> decorator.</p> <p>Example:</p> <pre><code>@Author.after(\"filter\")\nasync def after_method(response, info):\n    print(\"After everything is ready and done\")\n</code></pre>"},{"location":"manager/#filter-decorator","title":"<code>filter</code> decorator","text":"<p>Options: <code>('computed', 'query')</code></p> <p>Specify filter options for the model using the <code>@&lt;model_name&gt;.filter</code> decorator.</p> <p>Computed Example:</p> <pre><code>@Author.filter(\"computed\")\nasync def dataset_computed_value(response, info):\n    return {\"computed_value\": len(response.data)}\n</code></pre> <p>Query Example:</p> <pre><code>@Author.filter(\"query\")\nasync def preset_query(lookup, context=None):\n    perms_query = lookup.query([\n        [\"last_name\", \"contains\", \"doe\"],\n        \"or\",\n        [\"last_name\", \"contains\", \"crichton\"],\n    ])\n    perms_query &amp;= lookup.query([\n        [\"_id\", \"eq\", 1]\n    ])\n    return perms_query\n</code></pre>"},{"location":"schema/","title":"Schema","text":"<p>Creating Schema Types</p>"},{"location":"schema/#table-name-kebab-case","title":"Table Name (<code>kebab-case</code>)","text":"<p>The name of the Model, Type, or Table in your database, following kebab-case naming convention.</p>"},{"location":"schema/#engine","title":"Engine","text":"<p>Specifies the type of database to be used, either SQL or Mongo.</p>"},{"location":"schema/#config","title":"Config","text":"<p>The <code>config</code> section contains various keys for configuring your database schema:</p> Key Type Description <code>table_name</code> str Statically declared table name in the database <code>primary_key</code> list[str] Fields indexed by the database as primary keys <code>required</code> list[str] Fields marked as <code>NOT NULL</code> in the database <code>unique</code> list[str] Fields that must be unique in the database <code>unique_together</code> list[list[str]] Fields that must be unique together in combination <code>ignore</code> list[str] Fields computed and resolved by a function <code>auto</code> list[str] Fields that do not require user input"},{"location":"schema/#schema-scalar-fields","title":"Schema Scalar Fields","text":"<p>These are the available scalar fields in your schema with their Python data types and corresponding SQL field types:</p> Key Python Type SQL Fields <code>$string</code> str String(length=255) <code>$integer</code> int Integer <code>$float</code> float Float <code>$boolean</code> bool Boolean <code>$date</code> datetime.date Date <code>$time</code> datetime.time Time <code>$datetime</code> datetime.datetime DateTime <code>$decimal</code> decimal.decimal String(length=255) <code>$text</code> dbcontroller.text Text <code>$dict</code> dbcontroller.json JSON <code>$list</code> dbcontroller.json JSON"},{"location":"schema/#note","title":"Note","text":"<p>All scalar fields start with a \"<code>$</code>\" symbol. When you create your own custom type, you can reference it without the \"<code>$</code>\" symbol or any other special character. For example:</p> <pre><code>{\n    \"schema\": {\n        \"book\": \"book\",   # Single\n        \"books\": [\"book\"], # Multiple\n    }\n}\n</code></pre>"},{"location":"schema/#schema-demo","title":"Schema Demo","text":"<pre><code>import zmag\n\n@zmag.schema\nclass Schema:\n    types = [\n        {\n            \"name\": \"author\",\n            \"engine\": \"sql\",\n            \"config\": {\n                \"ignore\": [\"full_name\"],\n            },\n            \"schema\": {\n                \"first_name\": \"$string\",\n                \"last_name\": \"$string\",\n                \"full_name\": \"$string\",\n                \"books\": [\"book\"],\n            },\n        },\n        {\n            \"name\": \"book\",\n            \"engine\": \"sql\",\n            \"config\": {\n                \"auto\": [\"timestamp\"],\n            },\n            \"schema\": {\n                \"title\": \"$string\",\n                \"author\": \"author\",\n                \"timestamp\": \"$datetime\",\n            },\n        },\n    ]\n</code></pre>"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#settingspy","title":"<code>settings.py</code>","text":"<pre><code># -*- coding: utf-8 -*-\n\"\"\"\n    { Settings }\n\"\"\"\n\nimport pathlib\n\n# Base Directory\nBASE_DIR = pathlib.Path(__file__).parents[1] # (1)\n\n# Installed APPS\nINSTALLED_APPS = [\"app_one\", \"app_two\"] # (2)\n</code></pre> <ol> <li>The project's root directory</li> <li>Zmag Apps currently in use.</li> </ol>"},{"location":"settings/#spoctoml","title":"<code>spoc.toml</code>","text":"<pre><code>[spoc]\nmode = \"custom\"\ncustom_mode = \"development\"\n\n# GraphQL\n[spoc.graphql]\nmax_depth = 4\nmax_limit = 100\n\n# Database\n[spoc.database]\nengine = \"sql\"                  # options: mongo, sql\nconfig = \"sqlite:///example.db\" # mongodb://localhost:59567/example_db\n\n# Modes\n[spoc.apps]\ndevelopment = []\nstaging = []\nproduction = []\n</code></pre>"},{"location":"settings/#toml-settings","title":"TOML Settings","text":"Key Description <code>custom_mode</code> Options: <code>development</code>, <code>production</code>, <code>staging</code> <code>max_depth</code> Object's max depth levels of nesting allowed in a GraphQL query. <code>max_limit</code> Max number of rows to retrieve per request from the Database <code>engine</code> Options: <code>sql</code> or <code>mongo</code> <code>config</code> Database's connection_string. <code>spoc.apps</code> <code>INSTALLED_APPS</code> inside the spoc's file and based on the selected <code>custom_mode</code>"},{"location":"settings/#config-examples","title":"Config Examples","text":"<p>For More Details Go To...</p> <ul> <li>SQL Engine</li> <li>Mongo Engine</li> </ul> Key Description Mongo <code>mongodb://localhost:59567/your_database_name</code> SQLite <code>sqlite:///your_database_name.db</code> Postgres <code>postgresql://your_username:your_password@your_postgresql_host/your_database_name</code> MySQL <code>mysql://your_username:your_password@your_mysql_host/your_database_name</code>"},{"location":"databases/","title":"Migrations","text":"<p>Alembic</p> <p>The tool used to create migrations for SQL is Alembic for <code>SQLAlchemy</code>.</p> <pre><code>python ./main.py db {My-Command}\n</code></pre>"},{"location":"databases/#available-commands","title":"Available Commands","text":"Command Description <code>auto-migrate</code> Database Make-Migrations &amp; Migrate in a single step. <code>make-migrations</code> Database Make-Migrations. <code>migrate</code> Database Migrate. <code>upgrade</code> Database Migrate (Upgrade). <code>downgrade</code> Database Migrate (Downgrade). <code>history</code> Database Migrations History. <code>reset</code> Database Delete Migrations (All-Versions)."}]}